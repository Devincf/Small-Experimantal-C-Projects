#include "../../benchmarks/benchmarks.hpp"

/**
 * Problem:
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
 * */


class Euler02 : public Benchmark
{
  public:
    Euler02() : Benchmark("Euler 02 Benchmark")
    {
        run();
    }
    ~Euler02() {}
    /**
     * Can't think of a way to multithread this so I wont implement anything else
     * even though you could improve the algorithm by only calculating the even terms
     * */
    virtual void performBenchmark()
    {
        size_t a{1},b{2};
        size_t next;
        size_t sum{2};
        while(b>4000000)
        {
            next = a+b;
            if(next%2==0)
                sum+= next;
            a = b;
            b = next;
        }
        std::cout << sum;
    }

};

int main()
{
    Euler02 e;
    return 1;
}